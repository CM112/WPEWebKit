2022-03-20  Philippe Normand  <pnormand@igalia.com>

        REGRESSION(r289154) [GSTREAMER] webrtc/vp8-then-h264.html is crashing after SDK update to fdo 21.08 and Gstreamer 1.20
        https://bugs.webkit.org/show_bug.cgi?id=237872

        Reviewed by Adrian Perez de Castro.

        * platform/mediastream/libwebrtc/gstreamer/GStreamerVideoDecoderFactory.cpp:
        (WebCore::VP8Decoder::Create): Fix typo in decoder factory test.

2022-03-01  Cameron McCormack  <heycam@apple.com>

        Make input element UA shadow tree creation lazy
        https://bugs.webkit.org/show_bug.cgi?id=236747

        Reviewed by Aditya Keerthi.

        We currently delay InputType creation for parser inserted elements until
        just after the attributes have been set, so that we don't wastefully
        create an InputType and the UA shadow tree creation if a non-text
        type="" was specified on the tag. We don't do anything similar for
        script inserted input elements. We could make the InputType creation
        lazy, but most of the wasted time is due to the shadow tree creation.

        This patch makes InputType shadow tree creation lazy by delaying it
        until one of the following happens:

        1. the element is inserted into the document
        2. the type="" or value="" attributes are changed before the element
           is inserted into the document
        3. any DOM methods that need access to the innerTextElement() are
           called on the element before the element is inserted into the
           document

        Not all places where we call innerTextElement() on the
        HTMLInputElement are safe to lazily create the shadow trees, so we
        have two accessors:

        - innerTextElement() returns the inner text element if it's been
          created already
        - innerTextElementCreatingShadowSubtreeIfNeeded will perform the lazy
          shadow tree construction if it hasn't already been done

        Since the existing
        createShadowSubtreeAndUpdateInnerTextElementEditability function has
        more responsibility than just creating the subtree and ensuring the
        editability is set appropriately, it's renamed to a more manageable
        createShadowSubtree.

        This change is a 0.5% progression on Speedometer 2.

        Test: fast/forms/lazy-shadow-tree-creation.html

        * html/BaseDateAndTimeInputType.h:
        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::createShadowSubtree):
        (WebCore::BaseDateAndTimeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/ColorInputType.h:
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        (WebCore::ColorInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/FileInputType.h:
        * html/FileInputType.cpp:
        (WebCore::FileInputType::createShadowSubtree):
        (WebCore::FileInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/RangeInputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        (WebCore::RangeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/SearchInputType.h:
        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::createShadowSubtree):
        (WebCore::SearchInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed createShadowSubtreeAndUpdateInnerTextElementEditability to
        createShadowSubtree and remove the "isInnerTextElementEditable"
        argument, since we can ask the element() for its value if needed.
        createShadowSubtree is now also responsible for creating the shadow
        root.

        * html/TextFieldInputType.h:
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed. Ensure all shadow tree state is up to date now that it can be
        created later.

        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::hasCreatedShadowSubtree const):
        New functions to create the shadow subtree if it hasn't been done
        already, and to query whether it's been done.

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextFormControlElement.h:
        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::innerTextElementCreatingShadowSubtreeIfNeeded):
        New functions to first create the shadow subtree before returning
        innerTextElement(). HTMLTextAreaElement never lazily creates its
        shadow subtree and so just returns innerTextElement().

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Deleted. Just call through to m_inputType->createShadowTree()
        directly.

        (WebCore::HTMLInputElement::HTMLInputElement):
        (WebCore::HTMLInputElement::create):
        (WebCore::HTMLInputElement::initializeInputType):
        (WebCore::HTMLInputElement::updateType):
        Don't immediately create the shadow tree.

        (WebCore::HTMLInputElement::didFinishInsertingNode):
        Create the shadow subtree now that the element's been inserted. No
        need to call dataListMayHaveChanged since
        TextFieldInputType::createShadowSubtree will now do this.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::updateInnerTextValue):
        Ensure the shadow subtree is created since we need to poke at it.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::forwardEvent):
        Don't forward the event if the shadow tree hasn't been created yet.

        (WebCore::HTMLTextFormControlElement::setSelectionRange):
        Ensure the shadow tree has been created. This is needed if the
        selection APIs are called on the input element before it's inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::visiblePositionForIndex const):
        Assert that the shadow tree has been created, since editing
        functionality should only be needed if the element's been inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::setInnerTextValue):
        Ensure the shadow tree has been created.

        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleMouseDownEvent):
        (WebCore::RangeInputType::handleTouchEvent):
        Ensure the shadow tree has been created in case the event will change
        the value.

        (WebCore::RangeInputType::sliderTrackElement const):
        Only return the element if it's been created.

        (WebCore::RangeInputType::typedSliderThumbElement const):
        Assert that the element has been created.

        (WebCore::RangeInputType::dataListMayHaveChanged):
        Only try to re-layout if the shadow tree has been created.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::isEmptyValue const):
        Avoid creating the shadow subtree.

        (WebCore::TextFieldInputType::forwardEvent):
        Move the element assertion up to be consistent with other functions.

        (WebCore::TextFieldInputType::innerTextElement const):
        Don't assert, since this now can legitimately return null.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledStateChanged):
        (WebCore::FileInputType::attributeChanged):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::disabledStateChanged):
        (WebCore::RangeInputType::attributeChanged):
        (WebCore::RangeInputType::setValue):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::disabledStateChanged):
        (WebCore::TextFieldInputType::readOnlyStateChanged):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        (WebCore::TextFieldInputType::updateAutoFillButton):
        (WebCore::TextFieldInputType::dataListMayHaveChanged):
        Don't update the shadow tree contents if it hasn't been created yet.
        createShadowTree is responsible for ensuring it creates the shadow
        tree contents reflecting the current state.

2022-02-27  Cameron McCormack  <heycam@apple.com>

        Add a mechanism to request a UA shadow tree update before style
        https://bugs.webkit.org/show_bug.cgi?id=237224

        Reviewed by Antti Koivisto.

        SVG <use> elements register themselves with the document when their
        shadow tree contents need updating, and this updating is done in
        Document::resolveStyle. For lazy HTML <input> element UA shadow trees
        (in bug 236747) we need something similar.

        * dom/Document.cpp:
        (WebCore::Document::resolveStyle):
        (WebCore::Document::addElementWithPendingUserAgentShadowTreeUpdate):
        (WebCore::Document::removeElementWithPendingUserAgentShadowTreeUpdate):
        * dom/Document.h:
        * dom/Element.h:
        (WebCore::Element::updateUserAgentShadowTree):
        * svg/SVGDocumentExtensions.cpp:
        (WebCore::SVGDocumentExtensions::~SVGDocumentExtensions): Deleted.
        (WebCore::SVGDocumentExtensions::addUseElementWithPendingShadowTreeUpdate): Deleted.
        (WebCore::SVGDocumentExtensions::removeUseElementWithPendingShadowTreeUpdate): Deleted.
        * svg/SVGDocumentExtensions.h:
        (WebCore::SVGDocumentExtensions::useElementsWithPendingShadowTreeUpdate const): Deleted.
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::insertedIntoAncestor):
        (WebCore::SVGUseElement::removedFromAncestor):
        (WebCore::SVGUseElement::updateUserAgentShadowTree):
        (WebCore::SVGUseElement::invalidateShadowTree):
        (WebCore::SVGUseElement::updateShadowTree): Deleted.
        * svg/SVGUseElement.h:

2022-02-23  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, reverting r290284.
        https://bugs.webkit.org/show_bug.cgi?id=237131

        It is preventing the fuzzer from finding other bugs

        Reverted changeset:

        "Make input element UA shadow tree creation lazy"
        https://bugs.webkit.org/show_bug.cgi?id=236747
        https://commits.webkit.org/r290284

2022-03-10  Philippe Normand  <pnormand@igalia.com>

        REGRESSION(r284711): [GStreamer] Buffering, seek broken on youtube.com
        https://bugs.webkit.org/show_bug.cgi?id=233861

        Unreviewed, manual revert of 284711.

        * Modules/mediasource/MediaSource.cpp:
        (WebCore::MediaSource::currentTimeFudgeFactor):
        * platform/graphics/SourceBufferPrivate.h:
        (WebCore::SourceBufferPrivate::timeFudgeFactor const):
        * platform/graphics/gstreamer/GStreamerCommon.h:
        (WebCore::toGstClockTime):
        * platform/graphics/gstreamer/MediaSampleGStreamer.cpp:
        (WebCore::MediaSampleGStreamer::MediaSampleGStreamer):
        * platform/graphics/gstreamer/mse/AppendPipeline.cpp:
        (WebCore::AppendPipeline::appsinkNewSample):
        (WebCore::bufferTimeToStreamTime): Deleted.

2022-03-07  Alberto Garcia  <berto@igalia.com>

        makeprop.pl breaks reproducible builds
        https://bugs.webkit.org/show_bug.cgi?id=237521

        Reviewed by Carlos Garcia Campos.

        * css/makeprop.pl: Sort hash elements so the output file is always
        the same across different builds.

2022-03-01  Michael Catanzaro  <mcatanzaro@gnome.org>

        Misc compiler warnings, late Feb 2022 edition
        https://bugs.webkit.org/show_bug.cgi?id=237275

        Reviewed by Adrian Perez de Castro.

        Remove a redundant move. Sprinkle RELEASE_ASSERT_NOT_REACHED() as required to avoid
        -Wreturn-type warnings.

        * Modules/push-api/PushDatabase.cpp:
        (WebCore::openAndMigrateDatabaseImpl):
        * style/ContainerQueryEvaluator.cpp:
        (WebCore::Style::ContainerQueryEvaluator::evaluateCondition const):
        (WebCore::Style::ContainerQueryEvaluator::evaluateSizeFeature const):
        * style/ContainerQueryEvaluator.h:
        (WebCore::Style::operator!):
        * style/StyleScope.cpp:
        (WebCore::Style::Scope::updateQueryContainerState):

2022-03-02  Carlos Garcia Campos  <cgarcia@igalia.com>

        REGRESSION(r216096): [GTK] Test accessibility/gtk/menu-list-unfocused-notifications.html is failing since r216096
        https://bugs.webkit.org/show_bug.cgi?id=171598

        Reviewed by Adrian Perez de Castro.

        Enable accessibility when a WTR observer is added.

        * accessibility/atspi/AccessibilityAtspi.cpp:
        (WebCore::AccessibilityAtspi::addNotificationObserver):

2022-03-01  Carlos Garcia Campos  <cgarcia@igalia.com>

        [ATSPI] Remove layout tests checking children added/removed notifications
        https://bugs.webkit.org/show_bug.cgi?id=237272

        Reviewed by Adrian Perez de Castro.

        Do not send children-changed notifications to WTR observers.

        * accessibility/atspi/AccessibilityAtspi.cpp:
        (WebCore::AccessibilityAtspi::childrenChanged):
        (WebCore::AccessibilityAtspi::notifyChildrenChanged const): Deleted.
        * accessibility/atspi/AccessibilityAtspi.h:

2022-02-25  Carlos Garcia Campos  <cgarcia@igalia.com>

        AX: List item marker not exposed when not a direct child of a list item
        https://bugs.webkit.org/show_bug.cgi?id=236777
        <rdar://problem/89082485>

        Reviewed by Adrian Perez de Castro.

        It can happen that the marker is not a direct child of a list item, in which case the marker is ignored and not
        exposed to ATs.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::parentObjectUnignored const): In case of list marker find the marker list item.
        (WebCore::AccessibilityRenderObject::markerRenderer const): Helper to return the list item marker renderer.
        (WebCore::AccessibilityRenderObject::addListItemMarker): Add always the list item marker as the first child of
        list items.
        (WebCore::AccessibilityRenderObject::addChildren): Do not add list item marker children, they will be added to
        the right parent in addListItemMarker().
        * accessibility/AccessibilityRenderObject.h:

2022-02-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [ATSPI] Always expose table cells (layout and CSS) that have rendered text content
        https://bugs.webkit.org/show_bug.cgi?id=237204

        Reviewed by Adrian Perez de Castro.

        * accessibility/atspi/AccessibilityObjectAtspi.cpp:
        (WebCore::AccessibilityObject::accessibilityPlatformIncludesObject const):

2022-02-28  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][a11y] Test accessibility/gtk/xml-roles-exposed.html is failing since ATSPI switch
        https://bugs.webkit.org/show_bug.cgi?id=237202

        Reviewed by Adrian Perez de Castro.

        Handle the special case of form item having unknown aria role to be exposed as landmark.

        * accessibility/atspi/AccessibilityObjectAtspi.cpp:
        (WebCore::AccessibilityObjectAtspi::effectiveRole const):

2022-02-22  Chris Dumez  <cdumez@apple.com>

        CachedResourceLoader::allCachedSVGImages() reparses resource URLs unnecessarily
        https://bugs.webkit.org/show_bug.cgi?id=237002

        Reviewed by Darin Adler.

        Store URLs in the HashMaps instead of Strings since we have URLs initially and we
        need URLs eventually. This avoids having to re-parse the URL unnecessarily, which
        is fairly expensive.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::determineRevalidationPolicy const):
        (WebCore::CachedResourceLoader::notifyFinished):
        * loader/cache/CachedResourceLoader.h:

2022-02-22  Pablo Saavedra  <psaavedra@igalia.com>

        Properly uninitialize EGL display before termination
        https://bugs.webkit.org/show_bug.cgi?id=236766

        From the docs [1], if contexts or surfaces associated with display
        is current to any thread, they are not released until they
        are no longer current as a result of eglMakeCurrent.

        So call eglMakeCurrent() to such effect.

        [1] https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglMakeCurrent.xhtml

        Reviewed by Carlos Garcia Campos.

        * platform/graphics/PlatformDisplay.cpp:
        (WebCore::PlatformDisplay::terminateEGLDisplay):

2022-02-21  Alex Christensen  <achristensen@webkit.org>

        Improve const correctness for SecurityOrigin accessors
        https://bugs.webkit.org/show_bug.cgi?id=236983

        Reviewed by Chris Dumez.

        * loader/SubresourceLoader.h:
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::origin const):
        (WebCore::CachedResource::origin):
        * loader/cache/CachedResourceRequest.h:
        (WebCore::CachedResourceRequest::origin const):
        (WebCore::CachedResourceRequest::origin):

2022-02-21  Brandon Stewart  <brandonstewart@apple.com>

        Ensure layer has backing during traversal
        https://bugs.webkit.org/show_bug.cgi?id=236858

        Reviewed by Simon Fraser.

        Ensure the layer has a backing attached to it before trying to append
        the node id.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::collectStationaryLayerRelatedOverflowNodes):

2022-02-21  Cameron McCormack  <heycam@apple.com>

        Make input element UA shadow tree creation lazy
        https://bugs.webkit.org/show_bug.cgi?id=236747

        Reviewed by Aditya Keerthi.

        We currently delay InputType creation for parser inserted elements until
        just after the attributes have been set, so that we don't wastefully
        create an InputType and the UA shadow tree creation if a non-text
        type="" was specified on the tag. We don't do anything similar for
        script inserted input elements. We could make the InputType creation
        lazy, but most of the wasted time is due to the shadow tree creation.

        This patch makes InputType shadow tree creation lazy by delaying it
        until one of the following happens:

        1. the element is inserted into the document
        2. the type="" or value="" attributes are changed before the element
           is inserted into the document
        3. any DOM methods that need access to the innerTextElement() are
           called on the element before the element is inserted into the
           document

        Not all places where we call innerTextElement() on the
        HTMLInputElement are safe to lazily create the shadow trees, so we
        have two accessors:

        - innerTextElement() returns the inner text element if it's been
          created already
        - innerTextElementCreatingShadowSubtreeIfNeeded will perform the lazy
          shadow tree construction if it hasn't already been done

        Since the existing
        createShadowSubtreeAndUpdateInnerTextElementEditability function has
        more responsibility than just creating the subtree and ensuring the
        editability is set appropriately, it's renamed to a more manageable
        createShadowSubtree.

        This change is a 0.5% progression on Speedometer 2.

        Test: fast/forms/lazy-shadow-tree-creation.html

        * html/BaseDateAndTimeInputType.h:
        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::createShadowSubtree):
        (WebCore::BaseDateAndTimeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/ColorInputType.h:
        * html/ColorInputType.cpp:
        (WebCore::ColorInputType::createShadowSubtree):
        (WebCore::ColorInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/FileInputType.h:
        * html/FileInputType.cpp:
        (WebCore::FileInputType::createShadowSubtree):
        (WebCore::FileInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/RangeInputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::createShadowSubtree):
        (WebCore::RangeInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        * html/SearchInputType.h:
        * html/SearchInputType.cpp:
        (WebCore::SearchInputType::createShadowSubtree):
        (WebCore::SearchInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed createShadowSubtreeAndUpdateInnerTextElementEditability to
        createShadowSubtree and remove the "isInnerTextElementEditable"
        argument, since we can ask the element() for its value if needed.
        createShadowSubtree is now also responsible for creating the shadow
        root.

        * html/TextFieldInputType.h:
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::createShadowSubtree):
        (WebCore::TextFieldInputType::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Renamed. Ensure all shadow tree state is up to date now that it can be
        created later.

        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::createShadowSubtree):
        (WebCore::InputType::hasCreatedShadowSubtree const):
        New functions to create the shadow subtree if it hasn't been done
        already, and to query whether it's been done.

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::innerTextElementCreatingShadowSubtreeIfNeeded):
        * html/HTMLTextFormControlElement.h:
        * html/InputType.h:
        * html/InputType.cpp:
        (WebCore::InputType::innerTextElementCreatingShadowSubtreeIfNeeded):
        New functions to first create the shadow subtree before returning
        innerTextElement(). HTMLTextAreaElement never lazily creates its
        shadow subtree and so just returns innerTextElement().

        * html/HTMLInputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::createShadowSubtreeAndUpdateInnerTextElementEditability):
        Deleted. Just call through to m_inputType->createShadowTree()
        directly.

        (WebCore::HTMLInputElement::HTMLInputElement):
        (WebCore::HTMLInputElement::create):
        (WebCore::HTMLInputElement::initializeInputType):
        (WebCore::HTMLInputElement::updateType):
        Don't immediately create the shadow tree.

        (WebCore::HTMLInputElement::didFinishInsertingNode):
        Create the shadow subtree now that the element's been inserted. No
        need to call dataListMayHaveChanged since
        TextFieldInputType::createShadowSubtree will now do this.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::updateInnerTextValue):
        Ensure the shadow subtree is created since we need to poke at it.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::forwardEvent):
        Don't forward the event if the shadow tree hasn't been created yet.

        (WebCore::HTMLTextFormControlElement::setSelectionRange):
        Ensure the shadow tree has been created. This is needed if the
        selection APIs are called on the input element before it's inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::visiblePositionForIndex const):
        Assert that the shadow tree has been created, since editing
        functionality should only be needed if the element's been inserted
        into the document.

        (WebCore::HTMLTextFormControlElement::setInnerTextValue):
        Ensure the shadow tree has been created.

        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleMouseDownEvent):
        (WebCore::RangeInputType::handleTouchEvent):
        (WebCore::RangeInputType::handleKeydownEvent):
        Ensure the shadow tree has been created in case the event will change
        the value.

        (WebCore::RangeInputType::sliderTrackElement const):
        Only return the element if it's been created.

        (WebCore::RangeInputType::typedSliderThumbElement const):
        Assert that the element has been created.

        (WebCore::RangeInputType::dataListMayHaveChanged):
        Only try to re-layout if the shadow tree has been created.

        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::isEmptyValue const):
        Avoid creating the shadow subtree.

        (WebCore::TextFieldInputType::forwardEvent):
        Move the element assertion up to be consistent with other functions.

        (WebCore::TextFieldInputType::innerTextElement const):
        Don't assert, since this now can legitimately return null.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::disabledStateChanged):
        (WebCore::FileInputType::attributeChanged):
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::disabledStateChanged):
        (WebCore::RangeInputType::attributeChanged):
        (WebCore::RangeInputType::setValue):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::disabledStateChanged):
        (WebCore::TextFieldInputType::readOnlyStateChanged):
        (WebCore::TextFieldInputType::updatePlaceholderText):
        (WebCore::TextFieldInputType::updateAutoFillButton):
        (WebCore::TextFieldInputType::dataListMayHaveChanged):
        Don't update the shadow tree contents if it hasn't been created yet.
        createShadowTree is responsible for ensuring it creates the shadow
        tree contents reflecting the current state.

2022-02-21  Wenson Hsieh  <wenson_hsieh@apple.com>

        Add test coverage for the pasteboard writing codepath added in r289839
        https://bugs.webkit.org/show_bug.cgi?id=236944

        Reviewed by Aditya Keerthi.

        Add test coverage for the changes in r289839 in the case where `ENABLE(IMAGE_ANALYSIS_ENHANCEMENTS)` is turned
        on. To do this, we set the platform image analysis results to a new internal mock object,
        `FakeImageAnalysisResult`, that returns a string for a given NSRange. This code is then exercised by several
        existing layout tests that copy and paste text inside image overlays:

        - fast/images/text-recognition/image-overlay-line-wrapping.html
        - fast/images/text-recognition/image-overlay-text-without-leading-whitespace.html
        - fast/images/text-recognition/mac/copy-image-overlay-text-with-context-menu.html

        * testing/Internals.cpp:
        (WebCore::Internals::installImageOverlay):
        * testing/Internals.h:
        * testing/Internals.mm:
        (-[FakeImageAnalysisResult initWithString:]):
        (-[FakeImageAnalysisResult _attributedStringForRange:]):
        (WebCore::Internals::fakeImageAnalysisResultForTesting):

2022-02-21  Myles C. Maxfield  <mmaxfield@apple.com>

        Sort WebCore and WebKit Xcode project files
        https://bugs.webkit.org/show_bug.cgi?id=237010

        Unreviewed.

        No new tests because there is no behavior change.

        * WebCore.xcodeproj/project.pbxproj:

== Rolled over to ChangeLog-2022-02-22 ==
